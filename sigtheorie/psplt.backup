#include "psplt.h"

int psplt::init_file() {
    // initialise filestream:
    std::cout << "enter file name: \n";
    std::cin >> filename;
    fs.open(filename.c_str()); 
    
    if(!fs) {
        printf("\nerror: could not open file!\n");
        return -1;
    }
    // write header:
    fs << "%! PS\n";  // file type
    // program info, version, etc.:
    fs << "% |+++++++++++++++++++++++++|\n";
    fs << "% | code generated by psplt |\n";
    fs << "% |     by akke houben      |\n";
    fs << "% |+++++++++++++++++++++++++|\n\n";
        
    return 0;
}

int psplt::write_data() {
    fs << "% data arrays:------------------------------------------|\n";
    // x data:
    fs << "/xdata [ ";
    for(unsigned long n=0; n<N; n++) fs << x[n] << " ";
    fs << "] def\n";
    
    // y data:
    fs << "/ydata [ ";
    for(unsigned long n=0; n<N; n++) fs << y[n] << " ";
    fs << "] def\n";
    fs << "% ------------------------------------------------------|\n\n";
    
    return 0;
}

int psplt::write_opts() {
    // write options (for now these are constants)    
    fs << "% options:----------------------------------------------|\n";
    fs << "/constr_ratio 0 def % aspect ratio x:y = 1:1\n";
    fs << "/datalabels 0 def   % bool: draw data values (x, y)\n";
    fs << "/xlabels 1 def      % bool: draw x values\n";
    fs << "/ylabels 1 def      % bool: draw y values\n";
    fs << "% ------------------------------------------------------|\n\n";

    // write constants:
    fs << "% constants:--------------------------------------------|\n";
    fs << "/margin 8.5 2 mul def\n";
    fs << "/pagewidth 8.5 70 mul def               % pagewidth\n";
    fs << " /pageheight 8.5 70 mul 2 sqrt div def    % pageheight\n";
    fs << "% ------------------------------------------------------|\n\n";

    // initialise some global variables and settings:
    fs << "% initialise:-------------------------------------------|\n";
    fs << "/pw pagewidth def\n";
    fs << "/ph pageheight def\n";
    fs << "/Courier 12 selectfont\n";
    fs << "% ------------------------------------------------------|\n\n";

    return 0;
}

int psplt::write_gproc() {
    fs << "% procedures:-------------------------------------------|\n";
    fs << "% graphical:\n";
    // point:
    fs << "/point { % x y on stack\n";
    fs << "\t/y exch def\n";
    fs << "\t/x exch def\n";
    fs << "\tx y 4 0 360 arc fill\n";
    fs << "} def   % /point\n\n";
    // line:
    fs << "/line { % x y on stack\n";
    fs << "\t/y exch def\n";
    fs << "\t/x exch def\n";
    fs << "\tx x y\n";
    fs << "\tmoveto                       % move to x y\n";
    fs << "\thaxis lineto                 % draw line from x y to x base\n";
    fs << "} def   % /line\n\n";
    // labels:
    fs << "/lbl { % x y i on stack\n";
        fs << "\t/ival exch def  % store i val\n";
        fs << "\t/y exch def     % store y coordinate\n";
        fs << "\t/x exch def     % store x coordinate\n\n";
        
        fs << "\t% datalabels:\n";
        fs << "\tdatalabels 1 eq {   % datalabels == true?\n";
            fs << "\t\t/xval xdata i get def     % get x value\n";
            fs << "\t\t/yval ydata i get def     % get y value\n";
            fs << "\t\tx y moveto\n";
            fs << "\t\txval 20 string cvs show\n";
            fs << "\t\t(,) show\n";
            fs << "\t\tyval 20 string cvs show\n";
            fs << "\t} if\n\n";
        
        fs << "\t% axis labels:\n";
        fs << "\txlabels 1 eq {  % xlabels == true?\n";
            fs << "\t\t/xval xdata i get def\n";
            fs << "\t\tx haxis 17 sub moveto\n";
            fs << "\t\txval 20 string cvs show\n";
        fs << "\t} if\n";
        fs << "\tylabels 1 eq {  % ylabels == true?\n";
            fs << "\t\t/yval ydata i get def\n";
            fs << "\t\tvaxis y moveto\n";
            fs << "\t\tyval 20 string cvs show\n";
        fs << "\t} if\n";
    fs << "} def   % /lbl\n\n";
    
    fs << "/datapoint { % x y on stack\n";
        fs << "\t/y exch def\n";
        fs << "\t/x exch def\n";
        fs << "\tnewpath\n";
            fs << "\t\t1 setlinewidth\n";
            fs << "\t\tx y point       % call point function\n";
            fs << "\t\tx y line        % call line function\n";
        fs << "\tstroke\n";
    fs << "} def   % /datapoint\n";

    fs << "/drawaxis {\n";
        fs << "\t% x axis:\n";
        fs << "\tnewpath\n";
            fs << "\t\tmargin haxis moveto\n";
            fs << "\t\tpagewidth margin sub haxis lineto\n";
            fs << "\t\t2 setlinewidth\n";
        fs << "\tstroke\n\n";

        fs << "\t% y axis:\n";
        fs << "\tnewpath\n";
            fs << "\t\tvaxis margin moveto\n";
            fs << "\t\tvaxis pageheight margin sub lineto\n";
            fs << "\t\t2 setlinewidth\n";
        fs << "\tstroke\n";
    fs << "\t} def   % /drawaxis\n\n";

    fs << "/plot {\n";
        fs << "\t/i 0 def\n";
        fs << "\txnorm {     % x[i] on stack\n";
            fs << "\t\tvaxis add       % scale x[i] to pagewidth\n";
            fs << "\t\t/x exch def     % store x data\n\n";

            fs << "\t\tynorm i get     % get y[i] on stack\n";
            fs << "\t\thaxis add       % scale y[i] to pageheight\n";
            fs << "\t\t/y exch def     % store y data\n\n";

            fs << "\t\tx y datapoint   % draw data\n";
            fs << "\t\tx y i lbl       % draw labels\n";
            fs << "\t\t /i i 1 add def\n";
        fs << "\t} forall\n";
    fs << "} def   % /plot\n\n";

    return 0;
}

int psplt::write_dproc() {
    fs << "% data rearrangement/queries:\n";
    fs << "/absmax {  % array on stack\n";
        fs << "\t/arr exch def   % store array\n";
        fs << "\t/mval 0 def     % initiase maxvalue as 0\n";
        fs << "\t arr {\n";
            fs << "\t\t2 exp sqrt              % get absolute value\n";
            fs << "\t\t/val exch def           % store as /val\n";
            fs << "\t\tval mval gt             % current val > maxval?\n";
            fs << "\t\t{ /mval val def } if    % store current val as maxval\n";
        fs << "\t} forall\n";
        fs << "\tmval        % return max value\n";
    fs << "} def   % /max\n\n";

    fs << "/limits {   % array on stack\n";
        fs << "\t/arr exch def  % store array\n";
        fs << "\t/max 0 def\n";
        fs << "\t/min 0 def\n";
        fs << "\tarr { /val exch def     % store value\n";
            fs << "\t\tval max gt          % val > max\n";
            fs << "\t\t{ /max val def } if     % max = val\n";
            fs << "\t\tval min lt          % val < min\n";
            fs << "\t\t{ /min val def } if     % min = val\n";
        fs << "\t} forall\n";
        fs << "\tmin max     % return min and max\n";
    fs << "} def   % /limits\n\n";

    fs << "/scaledata {\n";
        fs << "\txdata absmax /max-x exch def   % define max of abs x-data\n";
        fs << "\tydata absmax /max-y exch def   % define max of abs y-data\n";
        fs << "\tconstr_ratio 1 eq       % constrain aspect ratio = 1?\n";
            fs << "\t\t{ max-x max-y gt    % get max of max-x and max-y\n";
                fs << "\t\t\t{ /max-y max-x def }\n";
                fs << "\t\t\t{ /max-x max-y def }\n";
            fs << "\t\tifelse\n";
            fs << "\t\t}\n";
        fs << "\tif\n\n";

        fs << "\t/xnorm  [ xdata { max-x div pw margin 2 mul sub 2 div mul } forall ] def    % normalise xdata\n";
        fs << "\t/ynorm [ ydata { max-y div ph margin 2 mul sub 2 div mul } forall ] def     % normalise ydata\n";
    fs << "} def   % /scaledata\n\n";

    fs << "/scaleaxis {\n";
        fs << "\txdata limits    % min and max of xdata on stack\n";
        fs << "\t/xmax exch def  % store max in xmax\n";
        fs << "\t/xmin exch def  % store min in xmin\n\n";

        fs << "\tydata limits    % min and max of ydata on stack\n";
        fs << "\t/ymax exch def  % store max in ymax\n";
        fs << "\t/ymin exch def  % store min in ymin\n\n";

        fs << "\t/haxis\n";
            fs << "\t\tymin 0 lt ymax 0 gt and { % min < 0 && max > 0?\n";
                fs << "\t\t\tph 2 div\n";
            fs << "\t\t} {\n";
                fs << "\t\t\tymin 0 eq   % false; no values < 0?\n";
                    fs << "\t\t\t\t{\n"; 
                        fs << "\t\t\t\t\tmargin\n";
                        fs << "\t\t\t\t\t/ynorm [ ynorm { 2 mul } forall ] def\n";
                    fs << "\t\t\t\t}\n";
                    fs << "\t\t\t\t{ ph margin sub }\n";
                fs << "\t\t\tifelse\n";
            fs << "\t\t} ifelse\n";
        fs << "\tdef % place horizontal axis\n\n";

        fs << "\t/vaxis\n";
            fs << "\t\txmin 0 lt xmax 0 gt and {% min < 0 && max > 0?\n";
                fs <<"\t\t\tpw 2 div\n";
            fs << "\t\t} {\n";
                fs << "\t\t\txmin 0 eq   % false: no values < 0?\n";
                    fs << "\t\t\t\t{\n";
                        fs << "\t\t\t\t\tmargin\n";
                        fs << "\t\t\t\t\t/xnorm [ xnorm { 2 mul } forall ] def\n";
                    fs << "\t\t\t\t}\n";
                    fs << "\t\t\t\t{ pw margin sub }\n";
                fs << "\t\t\tifelse\n";
            fs << "\t\t} ifelse\n";
        fs << "\tdef % place vertical axis\n\n";
    fs << "} def   % /scaleaxis\n";
    fs << "% ------------------------------------------------------|\n\n";

    return 0;
}

int psplt::invocate() {
    fs << "% invocation:-------------------------------------------|\n";
    fs << "scaledata\n";
    fs << "scaleaxis\n";
    fs << "drawaxis\n";
    fs << "plot\n";
    fs << "% ------------------------------------------------------|\n";

    return 0;
}

int psplt::write_file() {
    int err;
    if((err = init_file()) < 0) return err;
    if((err = write_data()) < 0) return err; 
    if((err = write_opts()) < 0) return err;
    if((err = write_gproc()) < 0) return err;
    if((err = write_dproc()) < 0) return err;
    if((err = invocate()) < 0) return err;
    
    fs.close();
    return 0;
}

psplt::psplt(double* t_x, double* t_y, unsigned long t_N) {
    x = t_x;
    y = t_y;
    N = t_N;
    write_file();
}
