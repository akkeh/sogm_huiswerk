%! PS
% |+++++++++++++++++++++++++|
% | code generated by psplt |
% |     by akke houben      |
% |+++++++++++++++++++++++++|

% data arrays:------------------------------------------|
/xdata [ 0 1 2 3 4 5 6 7 8 9 ] def
/ydata [ 0.248889 0.269489 0.233163 0.0917651 0.294251 0.574151 0.711365 0.64753 0.434527 0.192028 ] def
% ------------------------------------------------------|

% options:----------------------------------------------|
/constr_ratio 0 def % aspect ratio x:y = 1:1
/datalabels 0 def   % bool: draw data values (x, y)
/xlabels 1 def      % bool: draw x values
/ylabels 0 def      % bool: draw y values
/skip xdata length 10 idiv 1 add def % set skip for label draw
% ------------------------------------------------------|

% constants:--------------------------------------------|
/margin 8.5 2 mul def
/pagewidth 8.5 70 mul def               % pagewidth
 /pageheight 8.5 70 mul 2 sqrt div def    % pageheight
% ------------------------------------------------------|

% initialise:-------------------------------------------|
/pw pagewidth def
/ph pageheight def
/Courier 20 selectfont
% ------------------------------------------------------|

% procedures:-------------------------------------------|
% graphical:
/point { % x y on stack
	/y exch def
	/x exch def
	x y 4 0 360 arc fill
} def   % /point

/line { % x y on stack
	/y exch def
	/x exch def
	x x y
	moveto                       % move to x y
	haxis lineto                 % draw line from x y to x base
} def   % /line

/lbl { % x y i on stack
	/ival exch def  % store i val
	/y exch def     % store y coordinate
	/x exch def     % store x coordinate

	% datalabels:
	datalabels 1 eq {   % datalabels == true?
		/xval xdata i get def     % get x value
		/yval ydata i get def     % get y value
		x y moveto
		xval 20 string cvs show
		(,) show
		yval 20 string cvs show
	} if

	% axis labels:
	xlabels 1 eq {  % xlabels == true?
		/xval xdata i get def
		x haxis 17 sub moveto
		step skip mod 0 eq { % draw only 1 in /skip
			xval 20 string cvs show
		} if
		/step step 1 add def
	} if
	ylabels 1 eq {  % ylabels == true?
		/yval ydata i get def
		vaxis y moveto
		yval 20 string cvs show
	} if
} def   % /lbl

/datapoint { % x y on stack
	/y exch def
	/x exch def
	newpath
		1 setlinewidth
		x y point       % call point function
		x y line        % call line function
	stroke
} def   % /datapoint
/drawaxis {
	% x axis:
	newpath
		margin haxis moveto
		pagewidth margin sub haxis lineto
		2 setlinewidth
	stroke

	% y axis:
	newpath
		vaxis margin moveto
		vaxis pageheight margin sub lineto
		2 setlinewidth
	stroke
	} def   % /drawaxis

/plot {
	/i 0 def
	/step 0 def
	xnorm {     % x[i] on stack
		vaxis add       % scale x[i] to pagewidth
		/x exch def     % store x data

		ynorm i get     % get y[i] on stack
		haxis add       % scale y[i] to pageheight
		/y exch def     % store y data

		x y datapoint   % draw data
		x y i lbl       % draw labels
		 /i i 1 add def
	} forall
} def   % /plot

% data rearrangement/queries:
/absmax {  % array on stack
	/arr exch def   % store array
	/mval 0 def     % initiase maxvalue as 0
	 arr {
		2 exp sqrt              % get absolute value
		/val exch def           % store as /val
		val mval gt             % current val > maxval?
		{ /mval val def } if    % store current val as maxval
	} forall
	mval        % return max value
} def   % /max

/limits {   % array on stack
	/arr exch def  % store array
	/max 0 def
	/min 0 def
	arr { /val exch def     % store value
		val max gt          % val > max
		{ /max val def } if     % max = val
		val min lt          % val < min
		{ /min val def } if     % min = val
	} forall
	min max     % return min and max
} def   % /limits

/scaledata {
	xdata absmax /max-x exch def   % define max of abs x-data
	ydata absmax /max-y exch def   % define max of abs y-data
	constr_ratio 1 eq       % constrain aspect ratio = 1?
		{ max-x max-y gt    % get max of max-x and max-y
			{ /max-y max-x def }
			{ /max-x max-y def }
		ifelse
		}
	if

	/xnorm  [ xdata { max-x div pw margin 2 mul sub 2 div mul } forall ] def    % normalise xdata
	/ynorm [ ydata { max-y div ph margin 2 mul sub 2 div mul } forall ] def     % normalise ydata
} def   % /scaledata

/scaleaxis {
	xdata limits    % min and max of xdata on stack
	/xmax exch def  % store max in xmax
	/xmin exch def  % store min in xmin

	ydata limits    % min and max of ydata on stack
	/ymax exch def  % store max in ymax
	/ymin exch def  % store min in ymin

	/haxis
		ymin 0 lt ymax 0 gt and { % min < 0 && max > 0?
			ph 2 div
		} {
			ymin 0 eq   % false; no values < 0?
				{
					margin
					/ynorm [ ynorm { 2 mul } forall ] def
				}
				{ ph margin sub }
			ifelse
		} ifelse
	def % place horizontal axis

	/vaxis
		xmin 0 lt xmax 0 gt and {% min < 0 && max > 0?
			pw 2 div
		} {
			xmin 0 eq   % false: no values < 0?
				{
					margin
					/xnorm [ xnorm { 2 mul } forall ] def
				}
				{ pw margin sub }
			ifelse
		} ifelse
	def % place vertical axis

} def   % /scaleaxis
% ------------------------------------------------------|

% invocation:-------------------------------------------|
scaledata
scaleaxis
drawaxis
plot
% ------------------------------------------------------|
