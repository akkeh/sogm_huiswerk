%! PS
% |+++++++++++++++++++++++++|
% | code generated by psplt |
% |     by akke houben      |
% |+++++++++++++++++++++++++|

% data arrays:------------------------------------------|
/xdatadef
/ydata [ 2.83999 9.40128 14.5244 20.5133 21.861 11.5363 5.66482 18.3773 18.51 6.41158 14.4128 25.3503 22.7197 12.7961 9.85415 10.486 12.0922 10.56 8.23561 14.9811 17.8199 19.5617 17.7714 9.46488 8.75753 10.3995 11.8906 9.18303 11.1624 19.7954 21.1535 18.1858 20.8445 30.1315 25.2149 5.08724 16.5101 15.0074 16.4169 24.2901 13.7616 12.7592 21.5514 14.9467 5.46485 5.29675 3.16934 11.47 15.1543 9.01832 13.6778 25.403 19.1066 9.42922 34.0913 35.1665 11.0506 11.0411 6.00222 23.5135 37.2267 18.3856 16.7767 27.7894 8.67104 19.7734 24.3587 9.91558 5.21141 10.8292 17.5889 11.3582 7.41098 11.9694 21.408 35.6444 27.5814 17.4862 32.2085 27.0716 10.9231 6.33606 13.3818 27.8665 35.0937 26.4633 11.1949 32.3909 38.3643 20.8433 4.67937 7.92642 3.54582 18.9226 28.4558 26.5667 14.9226 7.33391 6.14677 6.63167 14.3134 17.1709 17.7215 17.2476 13.5233 9.56151 7.65967 7.05639 12.882 21.1387 27.0744 24.7206 13.1719 6.4735 18.5028 26.671 22.2324 4.21851 18.4217 28.786 19.3535 6.7069 17.886 13.2701 16.0202 21.8578 19.2366 15.845 5.38218 7.2996 9.12422 16.0132 9.57648 23.4269 44.3061 30.8779 8.60925 29.8809 19.7139 5.15485 7.603 7.14634 12.7929 3.93416 24.4974 24.122 11.2917 25.1243 28.5559 22.4893 12.3733 1.74929 1.0887 9.91101 17.2148 8.36658 9.98203 19.6922 14.1009 2.1423 6.45577 9.56198 13.4291 16.2695 11.5213 0.872825 11.7167 10.6325 12.2267 29.0772 32.9549 20.5047 2.60254 11.898 19.3583 16.3388 6.23991 2.42508 8.03341 10.5285 6.85685 0.179672 6.56768 11.248 13.0466 13.3062 8.78436 1.21487 7.11629 8.2894 15.239 12.5151 6.95055 18.7516 23.3074 26.7821 24.7746 13.7421 4.09925 4.36367 9.45126 11.3568 8.88435 7.67652 7.09795 7.71216 19.0605 17.3533 0.972878 14.1227 13.0609 6.54038 15.3383 24.2945 24.4922 29.1495 33.923 21.6541 11.0568 14.3486 19.5542 12.0975 19.2522 36.324 26.5097 13.3068 12.2046 3.86665 15.7644 10.2912 12.2867 13.7561 9.48168 12.3939 13.7675 19.7252 22.1414 11.9368 14.4687 20.2729 4.18844 20.2399 30.1116 21.617 15.1442 14.6106 12.8457 24.7551 24.9681 9.33864 16.41 17.4043 6.07648 5.25597 3.72344 3.10231 12.2928 14.6642 5.68194 8.60636 7.95242 11.6905 12.2916 17.0609 25.6286 16.9938 10.5428 14.2349 12.653 8.62011 4.20118 13.3536 12.1294 21.7544 28.13 22.9056 16.3454 21.8967 23.4987 9.42834 8.43846 8.23286 7.53264 14.5439 9.51308 17.2469 19.5496 16.3726 18.4525 25.5925 32.311 24.4005 7.00459 7.58072 9.39131 14.1447 15.6211 13.1393 9.48312 7.61605 11.2236 9.65765 5.01398 4.26831 10.7873 20.1412 25.4015 17.4967 6.36739 23.4493 22.4662 8.17099 9.69368 5.80929 17.0983 18.1945 7.1457 21.3412 24.8173 16.2088 11.4262 14.2443 17.6354 22.0078 16.8202 3.19111 17.7534 11.6719 10.355 21.1986 11.7209 14.732 16.5431 10.7145 14.2616 2.99277 17.7089 29.308 25.7952 16.0614 7.30814 14.9188 29.0663 34.3682 30.0016 21.7324 11.178 2.19008 6.03811 8.99343 19.1438 20.3068 7.6986 18.586 32.24 33.3579 23.5667 12.4019 14.4772 15.547 14.2527 21.1499 28.8445 25.9814 19.3129 15.3151 6.57079 2.3971 12.0115 21.0634 17.7957 12.4369 18.5878 15.69 9.19136 12.7949 18.4729 19.7745 11.3773 5.36568 11.4817 13.1276 28.8123 24.3764 12.4225 29.2756 21.0255 2.49744 2.01344 16.4131 29.0233 26.6184 19.7748 5.86226 17.9953 17.6177 8.86698 15.1357 18.0132 29.522 23.8512 14.108 24.0347 19.8646 7.66256 9.41442 12.9585 9.61683 6.60635 17.3114 17.9232 6.20058 8.20287 5.52956 6.6245 15.2682 18.5149 17.9702 26.338 30.8154 15.6447 5.11785 10.3296 9.48854 11.2657 18.8716 28.6135 19.8972 5.06671 4.60794 11.7407 22.0458 18.1549 7.8151 14.7858 18.1989 11.6453 13.0387 11.1189 7.59356 20.4558 23.2641 14.6314 2.79523 14.6126 15.4579 12.2589 16.3943 7.25077 15.2672 25.4483 13.371 14.5186 22.4293 12.3683 3.7074 8.59923 20.6113 18.2268 8.98431 27.2348 26.9533 8.95881 21.6429 27.8967 20.0989 11.3787 3.94783 16.4007 13.4908 2.96878 11.6222 0.783931 18.3392 28.4524 26.2329 18.9579 13.3447 12.8128 14.4721 9.82719 8.85552 9.21918 8.76009 25.2779 26.8877 16.3402 12.2267 11.4908 10.9466 13.74 12.8131 0.570487 12.4986 9.72332 8.34708 17.7399 11.4765 7.5465 14.0158 13.1807 5.81545 3.94843 11.5635 17.3986 16.2441 15.8419 17.125 11.4602 7.7504 6.52442 7.36588 7.70871 29.5334 32.177 15.9102 17.531 8.64264 19.6938 24.9837 13.3867 12.0807 8.84344 20.625 13.7309 10.2173 23.4922 12.7149 7.71197 15.9019 10.7719 10.2891 15.9838 12.261 2.73431 10.897 21.7535 28.1305 24.6995 17.2227 18.1784 20.8785 12.2492 13.0146 22.6118 15.9698 9.43126 19.786 18.2149 5.58765 13.6018 16.4202 12.4601 23.0562 25.2957 13.7786 7.34225 7.88753 7.26669 10.3441 2.74857 12.082 18.8192 15.1832 18.3302 23.4054 21.2842 21.4242 23.4177 16.9586 8.31008 17.9464 22.2145 16.6479 11.2519 16.9429 19.6452 13.2896 2.15568 10.2425 15.3361 16.3145 17.7843 16.31 15.4423 17.0003 15.5894 11.7681 6.26615 4.82527 2.72087 5.04894 10.2987 17.1875 18.6482 14.3712 11.3943 14.5925 23.6628 21.3648 9.00489 5.76122 13.5729 23.1767 30.7104 33.9411 32.835 37.2578 37.5057 22.7019 8.51049 15.7088 18.5196 16.8376 12.8141 8.10387 2.34456 4.15443 3.00862 7.38081 16.4081 14.3593 14.5219 20.4628 20.6829 20.2775 16.6288 14.0861 18.4697 22.809 18.0192 21.9771 28.0761 17.8617 6.71648 5.29128 5.30481 13.5704 25.4096 27.836 22.1191 18.8704 16.3723 14.2949 3.53079 13.152 11.1223 2.66315 14.5115 27.0507 25.2377 4.05231 25.173 19.3726 8.0169 20.3387 24.492 34.9489 23.9114 2.84764 18.2342 14.629 2.73157 10.559 25.8404 35.0174 25.7786 13.8207 18.7556 5.29016 14.1187 12.3215 19.0777 26.7941 12.9147 13.751 20.269 22.981 19.6833 9.65196 8.61777 13.0628 13.9743 21.2566 26.8665 15.1392 11.8816 15.3605 8.09382 18.1443 26.3259 27.4416 20.6942 10.3471 9.67265 12.8234 9.30494 9.08207 16.4815 17.5174 6.11165 10.213 14.0371 16.0872 24.6937 20.6256 12.253 14.5809 22.1679 21.043 7.67905 6.81336 13.2489 15.742 11.8402 18.0011 17.2411 7.90347 17.6715 17.372 27.8997 31.7558 11.0617 16.3106 26.9752 26.7066 23.2904 4.18175 29.9979 35.9457 16.0679 13.9002 18.2632 20.7439 16.2869 21.0161 24.624 11.7345 24.4459 18.7875 12.2767 16.587 13.7043 38.8519 34.6951 4.6291 18.5887 17.031 9.4357 18.0488 22.006 21.1722 21.7058 18.9567 15.8569 11.0722 3.3705 16.397 18.7124 15.0028 19.8078 26.3063 14.8803 12.1499 29.3102 30.1248 26.2486 23.3293 20.0716 11.0632 11.3917 18.7016 14.6315 2.92168 12.4719 21.2652 18.0319 11.0488 9.24184 20.229 16.9591 9.8114 21.0757 14.1774 4.47707 3.07346 9.13464 12.6784 17.0806 29.6512 29.4236 17.7961 22.0623 31.4537 25.4067 21.8589 13.6308 13.6116 31.2458 17.7792 24.7366 32.5519 10.5803 32.2779 32.1111 6.55001 23.6381 20.6792 5.55056 1.96884 9.04893 13.1631 18.8558 26.6153 16.8976 5.20133 19.0953 16.929 13.0918 17.0738 17.2486 14.8126 13.6848 12.2062 8.64873 9.03498 20.8592 25.9118 14.6293 5.18689 15.2623 17.0035 25.9842 22.7544 6.74087 12.1464 10.5602 11.8392 12.8647 4.58275 15.9662 28.3325 24.852 7.55124 6.80878 5.78849 11.2957 11.0671 10.313 15.5652 10.7594 1.13265 14.204 25.162 22.2744 10.3387 16.6439 18.6955 9.62023 10.287 13.5744 25.0647 31.4675 19.1803 7.70081 15.8304 24.8709 33.7375 36.9221 32.9056 19.3844 2.91812 11.4994 17.6576 4.96511 25.5379 41.8492 26.3488 8.46465 29.1056 22.9663 9.87393 9.5763 7.34029 18.2182 28.9942 27.2464 18.8785 31.5649 27.3216 4.80942 17.6152 14.5497 24.1409 28.4699 14.4921 2.01567 6.07771 6.84716 11.6296 14.6641 9.63704 3.36749 4.44291 13.9417 13.3379 7.81752 13.0892 9.71679 8.77904 7.32607 6.35992 6.92604 9.73331 18.591 18.9077 11.6327 5.46394 8.34976 15.2947 17.1842 9.34243 0.965444 0.479553 6.76725 7.62566 3.49356 17.9887 24.9146 21.8767 12.6343 1.30861 9.20485 11.9127 10.8785 20.3821 20.5992 10.9975 11.6831 23.4626 35.7057 31.0709 17.5804 20.8103 18.8316 9.02092 13.9735 20.9494 20.4 13.0681 7.26234 28.4328 35.6019 31.6117 28.0252 14.304 4.2067 13.1848 22.5148 27.8731 20.4209 12.1931 7.22422 6.00464 9.99782 15.7181 22.5708 20.9317 8.73582 5.65877 9.92896 9.79887 6.59005 18.1041 23.4438 13.5648 25.3462 17.9536 16.3794 41.1279 30.3173 2.77789 7.13802 14.5058 29.1065 18.8232 6.13503 15.9838 15.4577 18.722 15.7664 10.3941 5.50246 7.2722 25.4385 34.7415 24.7294 5.44001 6.08114 7.40396 ] def
% ------------------------------------------------------|

% options:----------------------------------------------|
/constr_ratio 0 def % aspect ratio x:y = 1:1
/datalabels 0 def   % bool: draw data values (x, y)
/xlabels 1 def      % bool: draw x values
/ylabels 0 def      % bool: draw y values
% ------------------------------------------------------|

% constants:--------------------------------------------|
/margin 8.5 def
/pagewidth 8.5 70 mul def               % pagewidth
 /pageheight 8.5 70 mul 2 sqrt div def    % pageheight
% ------------------------------------------------------|

% initialise:-------------------------------------------|
/pw pagewidth def
/ph pageheight def
/Courier 20 selectfont
% ------------------------------------------------------|

% procedures:-------------------------------------------|
% graphical:
/point { % x y on stack
	/y exch def
	/x exch def
	x y 4 0 360 arc fill
} def   % /point

/line { % x y on stack
	/y exch def
	/x exch def
	x x y
	moveto                       % move to x y
	haxis lineto                 % draw line from x y to x base
} def   % /line

/lbl { % x y i on stack
	/ival exch def  % store i val
	/y exch def     % store y coordinate
	/x exch def     % store x coordinate

	% datalabels:
	datalabels 1 eq {   % datalabels == true?
		/xval xdata i get def     % get x value
		/yval ydata i get def     % get y value
		x y moveto
		xval 20 string cvs show
		(,) show
		yval 20 string cvs show
	} if

	% axis labels:
	xlabels 1 eq {  % xlabels == true?
		/xval xdata i get def
		x haxis 17 sub moveto
		xval 20 string cvs show
	} if
	ylabels 1 eq {  % ylabels == true?
		/yval ydata i get def
		vaxis y moveto
		yval 20 string cvs show
	} if
} def   % /lbl

/datapoint { % x y on stack
	/y exch def
	/x exch def
	newpath
		1 setlinewidth
		x y point       % call point function
		x y line        % call line function
	stroke
} def   % /datapoint
/drawaxis {
	% x axis:
	newpath
		margin haxis moveto
		pagewidth margin sub haxis lineto
		2 setlinewidth
	stroke

	% y axis:
	newpath
		vaxis margin moveto
		vaxis pageheight margin sub lineto
		2 setlinewidth
	stroke
	} def   % /drawaxis

/plot {
	/i 0 def
	xnorm {     % x[i] on stack
		vaxis add       % scale x[i] to pagewidth
		/x exch def     % store x data

		ynorm i get     % get y[i] on stack
		haxis add       % scale y[i] to pageheight
		/y exch def     % store y data

		x y datapoint   % draw data
		x y i lbl       % draw labels
		 /i i 1 add def
	} forall
} def   % /plot

% data rearrangement/queries:
/absmax {  % array on stack
	/arr exch def   % store array
	/mval 0 def     % initiase maxvalue as 0
	 arr {
		2 exp sqrt              % get absolute value
		/val exch def           % store as /val
		val mval gt             % current val > maxval?
		{ /mval val def } if    % store current val as maxval
	} forall
	mval        % return max value
} def   % /max

/limits {   % array on stack
	/arr exch def  % store array
	/max 0 def
	/min 0 def
	arr { /val exch def     % store value
		val max gt          % val > max
		{ /max val def } if     % max = val
		val min lt          % val < min
		{ /min val def } if     % min = val
	} forall
	min max     % return min and max
} def   % /limits

/scaledata {
	xdata absmax /max-x exch def   % define max of abs x-data
	ydata absmax /max-y exch def   % define max of abs y-data
	constr_ratio 1 eq       % constrain aspect ratio = 1?
		{ max-x max-y gt    % get max of max-x and max-y
			{ /max-y max-x def }
			{ /max-x max-y def }
		ifelse
		}
	if

	/xnorm  [ xdata { max-x div pw margin 2 mul sub 2 div mul } forall ] def    % normalise xdata
	/ynorm [ ydata { max-y div ph margin 2 mul sub 2 div mul } forall ] def     % normalise ydata
} def   % /scaledata

/scaleaxis {
	xdata limits    % min and max of xdata on stack
	/xmax exch def  % store max in xmax
	/xmin exch def  % store min in xmin

	ydata limits    % min and max of ydata on stack
	/ymax exch def  % store max in ymax
	/ymin exch def  % store min in ymin

	/haxis
		ymin 0 lt ymax 0 gt and { % min < 0 && max > 0?
			ph 2 div
		} {
			ymin 0 eq   % false; no values < 0?
				{
					margin
					/ynorm [ ynorm { 2 mul } forall ] def
				}
				{ ph margin sub }
			ifelse
		} ifelse
	def % place horizontal axis

	/vaxis
		xmin 0 lt xmax 0 gt and {% min < 0 && max > 0?
			pw 2 div
		} {
			xmin 0 eq   % false: no values < 0?
				{
					margin
					/xnorm [ xnorm { 2 mul } forall ] def
				}
				{ pw margin sub }
			ifelse
		} ifelse
	def % place vertical axis

} def   % /scaleaxis
% ------------------------------------------------------|

% invocation:-------------------------------------------|
scaledata
scaleaxis
drawaxis
plot
% ------------------------------------------------------|
