%! PS
% |+++++++++++++++++++++++++|
% | code generated by psplt |
% |     by akke houben      |
% |+++++++++++++++++++++++++|

% data arrays:------------------------------------------|
/xdatadef
/ydata [ 448.26 312.333 48.0574 92.5158 41.6546 48.6202 41.2388 27.3184 44.5898 4.98197 28.3043 3.68785 21.4986 7.23959 22.2913 13.4956 16.4392 18.1798 6.32744 11.0299 12.7262 24.3034 3.91147 21.3472 19.4991 4.00467 5.22581 16.8869 17.567 18.8312 31.9853 25.6369 12.4919 10.9431 16.5671 7.54219 12.7553 17.0491 11.5375 10.617 5.48342 5.81327 4.2176 11.8305 5.27555 7.66668 10.9339 13.7134 9.2813 6.7161 12.6021 3.06408 6.29859 8.49284 13.2358 5.22308 10.7409 12.972 7.50799 12.9106 10.1935 6.58831 5.17216 12.6867 4.46239 12.6149 17.1869 6.73627 3.19142 5.55884 9.19794 6.27982 2.22453 6.30279 13.5168 15.5032 13.6368 6.41463 5.14501 7.3455 10.1588 14.254 6.12176 13.5128 12.7337 1.66423 4.56073 7.53714 12.0045 10.4965 9.62692 3.29483 6.26718 7.49264 14.2787 17.4691 10.9566 6.44044 5.4828 4.06716 8.64134 14.5677 11.0625 4.76317 9.31286 6.5324 4.62398 14.664 13.1674 8.20055 10.1277 10.1199 15.4957 11.1847 8.90135 5.90902 6.19195 10.527 3.10737 10.3456 8.19411 14.5959 14.5763 7.35201 11.1637 8.94147 10.8055 6.80517 5.95112 8.34041 4.3351 6.36013 6.16956 7.70596 6.1754 7.06766 12.0445 9.28712 8.93528 13.0686 8.21464 5.85105 8.21528 6.25302 5.49347 6.04508 5.65218 5.2947 4.02672 5.07849 11.8806 8.74324 3.26791 11.3849 10.5694 4.4346 2.07457 5.01322 9.91922 10.2085 10.4178 13.978 11.9199 11.6239 9.33886 3.7065 5.40995 4.51028 8.6944 8.85965 8.51779 11.2737 14.1301 11.4598 13.304 13.978 4.44164 3.85718 1.52445 3.77545 4.9937 15.4891 15.9771 2.69539 11.6133 9.91352 5.51426 10.9858 11.7783 12.6889 14.8668 12.7721 3.49645 6.48361 7.13839 7.54417 7.27125 9.70302 12.4397 5.40328 6.61498 12.6529 9.13841 2.95027 11.3043 11.302 3.39153 4.13368 4.62059 4.92761 4.81377 5.79339 6.27624 1.63532 6.11317 6.12486 1.09505 3.44787 6.33044 8.52424 3.1147 7.6531 11.3616 6.14174 6.28574 11.1166 14.5342 10.1202 6.81808 12.6125 7.17353 4.45063 7.64735 7.88132 12.5331 11.5103 5.99671 11.6562 15.9126 10.2255 2.99958 3.48844 4.89573 7.60107 2.2525 5.05896 7.8112 17.1213 22.6818 14.4922 2.46884 8.15783 6.04253 9.697 9.36875 1.42977 6.58873 7.52192 5.53609 7.35849 12.2329 14.3385 13.2028 11.6794 7.40223 2.65105 3.43135 2.29367 4.15258 10.0444 8.64569 1.30005 5.72858 1.75338 5.92507 7.77012 9.19985 9.13562 2.34869 5.69649 6.68948 5.01433 4.26707 12.1523 10.2598 2.91446 12.7893 8.38292 4.79407 8.96742 5.34268 5.79937 1.65856 5.92376 8.59551 8.15994 8.46854 5.85035 5.52026 11.577 10.6105 4.79833 8.77484 5.51449 4.94779 7.88647 12.2137 18.4327 12.4676 1.15126 6.96029 7.04992 14.0546 12.7985 4.90626 2.35275 5.53601 9.5403 7.0284 2.98046 4.12403 4.05197 7.11266 8.98923 7.66531 3.56713 4.42912 9.75474 13.8162 15.3369 8.76378 4.85612 14.2072 11.7768 4.00454 1.90098 7.11799 6.83254 4.54648 9.72884 5.52196 6.66454 6.61092 7.39771 9.91595 7.05681 8.80981 7.28682 14.9883 13.6883 1.49448 9.46737 5.49084 6.57674 6.17713 4.65497 10.2339 6.17032 9.44452 10.6934 4.00862 8.25404 6.46046 2.48171 7.25287 2.91477 4.72103 5.15064 4.94961 6.82596 5.15172 2.26919 7.64629 13.4936 9.21129 7.7287 15.8614 13.0383 3.07641 8.72566 10.7954 6.84901 11.0806 16.5275 14.6901 10.0639 5.75505 1.66035 6.00153 1.67474 11.1456 14.1246 5.46804 5.36198 9.13503 8.34744 4.93377 4.8707 7.07842 5.70979 8.49812 10.5332 13.2313 11.0912 2.48432 4.30639 4.6017 10.4748 16.0401 11.105 2.60465 13.405 12.0885 6.50732 9.99091 7.13097 2.71961 7.43984 10.3698 9.8574 7.80662 7.67709 7.42199 4.80992 5.0838 6.01126 4.31913 9.88176 9.29147 1.41328 7.94439 7.03238 2.33331 11.3748 14.9148 12.1704 7.02184 7.98545 11.7033 10.287 3.76182 7.8266 11.6488 8.07798 9.01231 11.7643 6.68033 3.81999 3.56572 4.55785 6.0632 3.91631 6.90145 1.82978 12.2719 20.0804 17.3469 10.4092 3.93978 5.52683 10.2206 8.99735 4.45922 5.47799 7.00443 7.92663 11.8517 11.7405 9.33317 8.46436 7.17818 10.5915 8.55458 2.60325 10.201 7.74871 5.27163 8.57244 5.56337 10.1489 9.98554 5.72796 5.12775 5.65143 11.2685 10.7789 4.78218 0.441666 3.62814 8.74221 14.1856 14.5083 11.2323 9.14684 4.37875 4.79482 2.96219 4.04937 5.92178 6.38463 14.9149 14.4657 5.99799 0.559974 1.79165 5.29988 4.36413 3.5009 6.83413 9.70407 8.9493 4.37613 4.05803 2.54626 4.92567 7.09421 5.62806 9.05964 10.2866 6.281 4.0655 5.02358 3.63738 3.50558 6.68651 6.30351 0.351883 9.27698 13.0792 9.22338 6.63593 9.0499 6.88666 2.02079 4.53829 8.52502 9.03217 5.5416 4.58409 8.11502 7.93908 6.82468 12.2795 13.2814 9.30561 13.5052 14.1805 7.21318 3.66777 1.04725 8.12092 12.0099 11.0552 10.9172 9.40306 5.14665 2.64485 4.74771 8.54714 11.2689 9.74744 6.0831 6.66175 7.70039 4.86594 1.83582 2.15377 3.55587 7.28919 3.60337 4.99556 8.76544 4.81562 4.84459 6.67329 5.46169 8.28514 9.17566 2.31248 7.37407 9.51308 4.80996 8.11721 11.6055 13.3828 7.44111 4.42237 9.60663 2.29186 9.98765 15.4441 13.6532 10.2351 9.84258 10.0713 6.41798 5.7124 7.96911 7.08455 3.87696 2.3603 6.11554 9.35673 9.48985 6.12535 3.37215 6.45198 7.16313 4.34786 8.93739 16.2573 19.1321 15.7336 10.5979 8.38638 4.46228 4.86379 6.84019 4.22761 5.0458 2.81738 4.16161 5.90598 2.86797 13.9616 16.5288 10.8156 9.53334 7.4202 3.91834 4.90941 2.12803 2.43332 2.56655 2.02102 5.31018 12.1478 13.9615 6.82014 3.87391 5.25975 4.67167 9.4093 3.56767 8.76244 15.4403 12.6429 10.4631 13.5737 12.7279 4.89327 6.51439 12.8155 11.3648 3.90735 4.791 6.60292 5.53005 9.04136 8.48194 4.65828 3.21046 6.88957 4.85653 3.1774 3.94635 3.24593 7.96341 2.39392 9.42485 14.8729 11.8831 6.46724 5.55399 9.5672 10.7555 7.62365 6.46665 12.4406 9.42787 7.40364 8.88603 2.24601 8.64359 10.8487 14.0682 11.0139 7.84325 12.114 6.40992 5.81792 8.17011 5.64826 4.53739 9.88957 15.7552 16.7036 9.27255 3.48695 11.1072 12.0731 9.59735 3.4103 18.3492 17.7462 1.76014 19.2469 18.8809 6.05958 3.04404 1.68232 3.0244 2.69122 5.28183 3.10941 7.64011 7.19713 2.92591 8.6568 14.6659 19.185 16.5241 8.52641 4.50293 7.46932 4.4282 4.36573 11.0905 11.5149 7.14436 6.50005 13.134 13.8552 7.97567 3.27612 5.79724 8.41751 10.4431 8.65822 4.31154 6.81057 5.92332 6.54103 6.02196 1.74793 8.19941 7.18513 3.56032 0.433641 7.47667 12.1147 6.62697 4.34874 10.0374 6.13615 3.15479 7.12479 6.01667 7.01846 10.3081 8.13282 4.72185 9.10863 6.47954 8.05452 12.2897 6.02554 6.6096 8.74292 7.54107 10.7425 9.77421 12.9457 9.86165 5.78989 13.5788 7.5881 8.41491 16.7243 13.4325 5.53618 2.4697 5.8571 4.00134 2.86386 7.87296 7.22204 4.94658 5.21629 6.34279 5.70614 7.04026 6.23995 6.45103 11.0062 7.38251 9.13022 13.244 9.39986 6.08303 1.54925 7.65667 7.30044 3.74938 13.2184 13.2793 6.73147 2.26273 3.34907 6.9176 7.63743 6.97729 7.64288 9.80908 13.4418 12.1828 5.37829 4.3288 2.21091 6.32893 8.49565 6.33595 5.57099 6.93216 8.76688 7.68677 14.9131 15.649 6.25426 8.02399 9.05939 8.76197 8.95661 4.69619 8.19124 11.3853 10.7867 8.96707 7.4803 5.88138 2.31608 3.29954 6.05927 2.21621 4.34838 5.79793 4.33399 9.80262 13.5708 14.1833 9.90207 4.57716 5.4915 3.74834 1.77787 1.74162 3.27957 3.04369 1.90034 2.92558 3.56452 4.14656 3.82752 3.87855 6.82386 7.70313 8.79896 10.555 7.98533 9.01677 10.5106 4.91349 4.60382 8.02867 5.13596 3.44451 7.42463 10.1586 11.9566 8.61667 6.25354 10.1579 6.7093 9.27564 14.9981 13.9908 9.8546 5.41642 9.42768 10.3943 4.65994 5.33075 4.53511 5.71179 6.50829 1.79319 9.72139 13.6132 12.8772 10.868 6.65059 5.88414 13.1346 13.5708 5.47204 7.57057 10.4432 6.18557 7.02796 8.16755 3.1946 5.61507 12.0457 11.3441 4.57738 1.66428 5.81606 9.16629 8.12847 11.2899 14.5129 9.30183 6.97186 5.62061 6.40306 13.4663 13.2016 8.84136 4.51088 6.3814 10.6732 11.9416 9.10584 5.42065 4.33714 0.972457 7.50804 10.1829 9.79483 10.5634 12.7681 11.6862 4.46626 6.8012 14.7143 15.7248 9.27978 4.96409 10.6551 10.9985 8.09045 7.09735 5.25519 4.12585 0.415508 6.6387 7.92329 5.9687 10.2566 5.1905 6.19279 11.2814 9.81906 9.57506 5.72661 7.58442 5.29948 9.28162 16.0288 13.9374 9.70165 10.8744 10.213 1.92685 8.48869 8.89479 2.38057 1.17461 5.18191 9.79937 5.53037 2.96373 2.94048 11.5713 14.5983 5.14717 7.6696 12.0463 8.31388 7.14023 11.8193 11.0573 6.99486 2.30526 9.07754 14.188 10.2409 15.4981 14.7661 2.84876 ] def
% ------------------------------------------------------|

% options:----------------------------------------------|
/constr_ratio 0 def % aspect ratio x:y = 1:1
/datalabels 0 def   % bool: draw data values (x, y)
/xlabels 1 def      % bool: draw x values
/ylabels 0 def      % bool: draw y values
% ------------------------------------------------------|

% constants:--------------------------------------------|
/margin 8.5 def
/pagewidth 8.5 70 mul def               % pagewidth
 /pageheight 8.5 70 mul 2 sqrt div def    % pageheight
% ------------------------------------------------------|

% initialise:-------------------------------------------|
/pw pagewidth def
/ph pageheight def
/Courier 20 selectfont
% ------------------------------------------------------|

% procedures:-------------------------------------------|
% graphical:
/point { % x y on stack
	/y exch def
	/x exch def
	x y 4 0 360 arc fill
} def   % /point

/line { % x y on stack
	/y exch def
	/x exch def
	x x y
	moveto                       % move to x y
	haxis lineto                 % draw line from x y to x base
} def   % /line

/lbl { % x y i on stack
	/ival exch def  % store i val
	/y exch def     % store y coordinate
	/x exch def     % store x coordinate

	% datalabels:
	datalabels 1 eq {   % datalabels == true?
		/xval xdata i get def     % get x value
		/yval ydata i get def     % get y value
		x y moveto
		xval 20 string cvs show
		(,) show
		yval 20 string cvs show
	} if

	% axis labels:
	xlabels 1 eq {  % xlabels == true?
		/xval xdata i get def
		x haxis 17 sub moveto
		xval 20 string cvs show
	} if
	ylabels 1 eq {  % ylabels == true?
		/yval ydata i get def
		vaxis y moveto
		yval 20 string cvs show
	} if
} def   % /lbl

/datapoint { % x y on stack
	/y exch def
	/x exch def
	newpath
		1 setlinewidth
		x y point       % call point function
		x y line        % call line function
	stroke
} def   % /datapoint
/drawaxis {
	% x axis:
	newpath
		margin haxis moveto
		pagewidth margin sub haxis lineto
		2 setlinewidth
	stroke

	% y axis:
	newpath
		vaxis margin moveto
		vaxis pageheight margin sub lineto
		2 setlinewidth
	stroke
	} def   % /drawaxis

/plot {
	/i 0 def
	xnorm {     % x[i] on stack
		vaxis add       % scale x[i] to pagewidth
		/x exch def     % store x data

		ynorm i get     % get y[i] on stack
		haxis add       % scale y[i] to pageheight
		/y exch def     % store y data

		x y datapoint   % draw data
		x y i lbl       % draw labels
		 /i i 1 add def
	} forall
} def   % /plot

% data rearrangement/queries:
/absmax {  % array on stack
	/arr exch def   % store array
	/mval 0 def     % initiase maxvalue as 0
	 arr {
		2 exp sqrt              % get absolute value
		/val exch def           % store as /val
		val mval gt             % current val > maxval?
		{ /mval val def } if    % store current val as maxval
	} forall
	mval        % return max value
} def   % /max

/limits {   % array on stack
	/arr exch def  % store array
	/max 0 def
	/min 0 def
	arr { /val exch def     % store value
		val max gt          % val > max
		{ /max val def } if     % max = val
		val min lt          % val < min
		{ /min val def } if     % min = val
	} forall
	min max     % return min and max
} def   % /limits

/scaledata {
	xdata absmax /max-x exch def   % define max of abs x-data
	ydata absmax /max-y exch def   % define max of abs y-data
	constr_ratio 1 eq       % constrain aspect ratio = 1?
		{ max-x max-y gt    % get max of max-x and max-y
			{ /max-y max-x def }
			{ /max-x max-y def }
		ifelse
		}
	if

	/xnorm  [ xdata { max-x div pw margin 2 mul sub 2 div mul } forall ] def    % normalise xdata
	/ynorm [ ydata { max-y div ph margin 2 mul sub 2 div mul } forall ] def     % normalise ydata
} def   % /scaledata

/scaleaxis {
	xdata limits    % min and max of xdata on stack
	/xmax exch def  % store max in xmax
	/xmin exch def  % store min in xmin

	ydata limits    % min and max of ydata on stack
	/ymax exch def  % store max in ymax
	/ymin exch def  % store min in ymin

	/haxis
		ymin 0 lt ymax 0 gt and { % min < 0 && max > 0?
			ph 2 div
		} {
			ymin 0 eq   % false; no values < 0?
				{
					margin
					/ynorm [ ynorm { 2 mul } forall ] def
				}
				{ ph margin sub }
			ifelse
		} ifelse
	def % place horizontal axis

	/vaxis
		xmin 0 lt xmax 0 gt and {% min < 0 && max > 0?
			pw 2 div
		} {
			xmin 0 eq   % false: no values < 0?
				{
					margin
					/xnorm [ xnorm { 2 mul } forall ] def
				}
				{ pw margin sub }
			ifelse
		} ifelse
	def % place vertical axis

} def   % /scaleaxis
% ------------------------------------------------------|

% invocation:-------------------------------------------|
scaledata
scaleaxis
drawaxis
plot
% ------------------------------------------------------|
