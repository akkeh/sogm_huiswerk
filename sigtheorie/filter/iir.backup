#include <cmath>
#include <iostream>
#include <cstdlib>
#include "wavio.h"
/*

*/
class iir{
public:
    iir(unsigned int t_iord, unsigned int t_ford, double* t_ig, double* t_fg) {
        ford = t_ford + 1;
        iord = t_iord;
        fg = new double[ford];
        ig = new double[iord];

        mem_x = new double[ford];
        for(unsigned int n=0; n<ford; n++) {
            fg[n] = t_fg[n];
            mem_x[n] = 0;
        }
        mem_y = new double[iord];
        for(unsigned int n=0; n<iord; n++) {
            ig[n] = t_ig[n];
            mem_y[n] = 0;
        }
    }

    double calc(double x) {
        swap_x = new double[ford];
        swap_y = new double[iord];
 
        double y = 0;
        for(unsigned int n=0; n<ford; n++) {
            y += mem_x[n] * fg[n+1];
            swap_x[n+1 % ford] = mem_x[n];
        }

        for(unsigned int n=0; n<iord; n++) {
            y += mem_y[n] * ig[n];
            swap_y[n+1 % iord] = mem_y[n];
            std::cout << "y[" << n << "]: " << y <<std::endl;
        }
       
        y += x * fg[0];
        swap_x[0] = x;
        swap_y[0] = y;
        mem_x = swap_x;
        mem_y = swap_y;

        return y;
    }
private:
    double* mem_x;
    double* mem_y;
    double* swap_x;
    double* swap_y;
    unsigned int iord, ford;
    double* ig;
    double* fg;
};

int main(int argc, char** argv) {
    int ford = atoi(argv[1]) + 1;    
    int iord = atoi(argv[2]); 

    double* fg = new double[ford];
    double* ig = new double[iord];
    for(unsigned int n=0; n<ford; n++) {
        std::cout << "Finite coefficient " << n << "(x[n-" << n << "]): ";
        double coeff;
        std::cin >> coeff;
        fg[n] = coeff;
    }

    for(unsigned int n=0; n<iord; n++) {
        std::cout << "Infinite coefficient " << n+1 << "(y[n-" << n+1 << "]): ";
        double coeff;
        std::cin >> coeff;
        ig[n] = coeff;
    }


    std::cout << "init filter\n";
    iir filter(iord, ford - 1, ig, fg);
    
    unsigned long N = 44100;
    double* x = new double[N];
    double* y = new double[N];
    
    std::cout << "calculating....\n";

    for(unsigned long n=0; n<N; n++) {
        x[n] = (double)(rand() % 200)/200 - 1;
        y[n] = filter.calc(x[n]);
    }
    std::cout << "writing\n";
    
    wavio wav;
    wav.data = y;
    wav.N = N;
    wav.write("test_output.wav", 16, 1);

    wav.data = x;
    wav.N = N;
    wav.write("test_input.wav", 16, 1);




}
